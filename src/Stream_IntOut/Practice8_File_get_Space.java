package Stream_IntOut;import java.io.File;/** * 1、演示重命名的方法的两种形式： * 1.1重命名，改名 * 1.2 剪切，源文件都删除。 * <p> * 2、展示三个方法： * listRoots()获取根目录，windows就是盘符。 * <p> * //获取当前目录的空间使用情况。 * 2.1  long getFreeSpace() 通过此抽象路径名返回分区 named中未分配的字节数。 * 2.2 long getTotalSpace() 通过此抽象路径名返回分区 named的大小。 * 2.3 long getUsableSpace() 通过此抽象路径名返回分区 named上此虚拟机可用的字节数。 * <p> * 3、 * String[] list() 返回一个字符串数组，用于命名此抽象路径名表示的目录中的文件和目录。 * String[] list​(FilenameFilter filter) 返回一个字符串数组，用于命名由此抽象路径名表示的目录中的文件和目录，以满足指定的过滤器。 * File[] listFiles() 返回一个抽象路径名数组，表示此抽象路径名表示的目录中的文件。 * File[] listFiles​(FileFilter filter) 返回一个抽象路径名数组，表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 * File[] listFiles​(FilenameFilter filter) 返回一个抽象路径名数组，表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 */public class Practice8_File_get_Space {    public static void main(String[] args) {//        renameToDemo();//        listDemo();        //获取当前目录下的文件名和目录名以及隐藏文件        readList();    }    private static void readList() {        File file = new File("C:\\a.txt");        //注意这个时候，如果File封装的是一个文件，无论在不在，都会导致NullPointerException        //file.list()返回null;        //所以封装的必须是目录。还有如果是系统级隐藏目录，我们是无法访问的。        //当目录是空的，返回的数组长度是0，而不是null。        String[] files = file.list();//返回的是字符串。        if (files != null)            for (String s : files) {                System.out.println(s);            }    }    public static void listDemo() {        File[] files = File.listRoots();        String[] listName = new String[files.length];        int j = 0;        for (File f : files) {            System.out.println(f);//这里会打印根目录。哈希算法：            listName[j++] = f.toString();            // return f.getPath().toLowerCase(Locale.ENGLISH).hashCode() ^ 1234321;            /*结果：windows打印根目录就是盘符。            C:\            D:\            E:\             */        }        long[][] a = new long[files.length][3];        //开始获取各个盘符的空间大小和可用空间。        for (int i = 0; i < files.length; i++) {            long total = files[i].getTotalSpace();            long free = files[i].getFreeSpace();            a[i][0] = total;            a[i][1] = free;            a[i][2] = files[i].getUsableSpace();        }        j = 0;        for (long[] b : a) {            System.out.println(listName[j++] + " 总空间大小约" + Math.round(b[0] / Math.pow(1024, 3)) +                    "GB\n  剩余空间大小约" + Math.round(b[1] / Math.pow(1024, 3)) + "GB" +                    "\n虚拟机可以用的空间大小约" + Math.round(b[2] / Math.pow(1024, 3)) + "GB");        }        int max = 0;        for (int k = 0; k < (a.length - 1); k++) {            if (a[k][0] < a[k + 1][0]) {                max = k + 1;            }        }        System.out.println("最大的盘是" + listName[max].substring(0, 1) + " 空间大小约为；" +                Math.round(a[max][1] / Math.pow(1024, 3)) + "GB");    }    public static void renameToDemo() {        //1、重命名功能。同级目录        //File f1 = new File("E:\\1.mp3");        File f2 = new File("E:\\2.mp3");        //boolean res = f1.renameTo(f2);//是把文件1命名为f2的name        // System.out.println(res);        //2、剪切的实现，当位于不同的目录。        File f3 = new File("E:\\A\\3.mp3");//注意要指定文件名。        boolean res = f2.renameTo(f3);//此时源E:\2.mp3被删除，被剪切到了——E:\A\3.mp3        System.out.println(res);        //获取当前目录的空间使用情况。        System.out.println(f3.getFreeSpace() + "\n" + f3.getTotalSpace() + "\n" + f3.getUsableSpace());    }}